{"name":"Njet-configuration","tagline":"Configuration handler for njet","body":"njet-configuration\r\n==================\r\n\r\nConfiguration handler for projects.  Njet configuration is responsible for loading yaml configuration files.\r\n\r\n## Installation\r\n\r\n```JavaScript\r\nnpm install njet-configuration\r\n```\r\n\r\n## Usage\r\n\r\nFirst load njet configuration\r\n\r\n```JavaScript\r\nvar njetConfiguration = require('njet-configuration');\r\n```\r\n\r\nand create first configuration:\r\n\r\n```JavaScript\r\nvar config = njetConfiguration.create();\r\n```\r\n\r\n## Getting data\r\n\r\nTo get Your configuration use:\r\n\r\n```JavaScript\r\nconfig.get('x'); // to get specific value\r\nconfig.getConfiguration(); // to get all values as json object\r\n```\r\n\r\n## Set values from json objects\r\n\r\nThere are three ways to set configuration values.\r\n\r\n```JavaScript\r\nconfig.set('x', 5);\r\n```\r\n\r\nwill set \"x\" to 5. Now when You get Your configuration You will receive:\r\n\r\n```JavaScript\r\n{ \"x\": 5 }\r\n```\r\n\r\nYou can also replace whole configuration using load:\r\n\r\n```JavaScript\r\nconfig.load({\r\n    y: 6\r\n});\r\n```\r\n\r\nThis will replace Your configuration and You will receive:\r\n\r\n```JavaScript\r\n{ \"y\": 6 }\r\n```\r\n\r\nOr You can merge two objects together:\r\n\r\n```JavaScript\r\nconfig.merge({\r\n    z: 1\r\n});\r\n```\r\n\r\nTo get:\r\n\r\n```JavaScript\r\n{ \"y\": 6, \"z\": 1 }\r\n```\r\n\r\n## Merging\r\n\r\nMerge will always do deep copy of the objects. For example:\r\n\r\n```JavaScript\r\nconfig.load({\r\n    x: 1,\r\n    y: [\"a\"]\r\n});\r\n\r\nconfig.merge({\r\n    y: [\"b\"],\r\n    z: 3\r\n});\r\n```\r\n\r\nWill result:\r\n\r\n```JavaScript\r\n{ \"x\": 1, \"y\": [\"a\", \"b\"], \"z\": 3 }\r\n```\r\n\r\n## Validating\r\n\r\nThere are two ways to validate objects. You can add validators:\r\n\r\n```JavaScript\r\nconfig.addValidator(function (config) {\r\n    if (config.key === undefined) {\r\n        return false;\r\n    }\r\n    return true;\r\n});\r\n```\r\n\r\nOr schema:\r\n\r\n```JavaScript\r\nconfig.schema({\r\n    x: config.expect.number()\r\n});\r\n```\r\n\r\nTo validate configuration, simply use:\r\n\r\n```JavaScript\r\nconfig.validate();\r\nconfig.isValid();\r\n```\r\n\r\nFor more information about schema validation visit https://github.com/cruks/cruks-lib-config\r\n\r\n## Yaml configuration files\r\n\r\nYou can load yaml files and directories containing yaml files like this:\r\n\r\n```JavaScript\r\nconfig.load('/path/to/directory');\r\nconfig.load('/path/to/file.yml');\r\nconfig.merge('/path/to/another_file.yml');\r\nconfig.merge('/path/to/another/directory');\r\n```\r\n\r\n## Configuration\r\n\r\nYou cann pass options to njet configuration constructor. Like this:\r\n\r\n```JavaScript\r\nvar config = njetConfiguration.create({\r\n    varbosity: 1,\r\n    expect: expect,\r\n    loader: loader\r\n});\r\n```\r\n\r\n* Verbosity above 0 (default 0) allow njet configuration to print error messages on standard output if configuration validation fails.\r\n* expect is a module to validate configuration. It should have .schema() method that return object with .asset() method. Assert should take configuration json object as first parameter.\r\n* loader is a module for loading data. As first argument, loader take either data object or path to file. By default loader only load .yml files.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}